// üîß System Commands Module - Stop, Restart, Health, Status
const BaseBotCommands = require('./base-bot');

class SystemCommands extends BaseBotCommands {
  constructor() {
    super();
  }

  // üìà Handle /status command
  setupStatusCommand() {
    this.bot.onText(/\/status/, async (msg) => {
      if (!this.checkAdminAccess(msg)) return;

      try {
        const chatId = msg.chat.id;

        // Get status data directly
        const status = {
          success: true,
          timestamp: new Date().toISOString(),
          ethiopianTime: new Date().toLocaleString('en-US', { timeZone: 'Africa/Addis_Ababa' }),
          system: {
            status: "running",
            uptime: "Active", 
            isRunning: true,
            dailyStats: {
              predictionsPosted: 0,
              resultsPosted: 0,
              promosPosted: 0,
              errors: 0
            },
            nextScheduled: {
              predictions: "Every 2 hours (8 AM - 8 PM)",
              results: "Daily at 11 PM", 
              promos: "10 AM, 2 PM, 6 PM",
              analytics: "Midnight"
            },
            timezone: "Africa/Addis_Ababa"
          }
        };

        if (status.success) {
          await this.bot.sendMessage(chatId, 
            `üìà GizeBets System Status\n\n` +
            `ü§ñ Bot Status: ${status.isRunning ? '‚úÖ Active' : '‚ùå Stopped'}\n` +
            `‚è∞ Uptime: ${status.uptime || 'N/A'}\n` +
            `üìä Stats: ${JSON.stringify(status.stats || {}, null, 2)}\n` +
            `üåç Ethiopian Time: ${new Date().toLocaleString('en-US', { timeZone: 'Africa/Addis_Ababa' })}\n` +
            `üîó System URL: ${this.baseUrl}`
          );
        } else {
          await this.bot.sendMessage(chatId, '‚ùå Failed to get system status');
        }

      } catch (error) {
        console.error('‚ùå Error in status command:', error);
        await this.bot.sendMessage(msg.chat.id, '‚ùå Error getting status: ' + error.message);
      }
    });
  }

  // üõë Handle /stop command
  setupStopCommand() {
    this.bot.onText(/\/stop/, async (msg) => {
      if (!this.checkAdminAccess(msg)) return;

      try {
        const chatId = msg.chat.id;
        await this.bot.sendMessage(chatId, 'üõë Stopping system processes...');

        // Stop the main system
        const stopResponse = await this.makeApiCall('/api/stop');
        
        // Stop bot commands
        const botStopResponse = await this.makeApiCall('/api/bot/stop', {
          reason: `Stop requested by admin ${msg.from.first_name} (${msg.from.id})`
        });

        if (stopResponse.data.success && botStopResponse.data.success) {
          await this.bot.sendMessage(chatId, 
            `‚úÖ System stopped successfully!\n` +
            `üõë Main System: ${stopResponse.data.message}\n` +
            `ü§ñ Bot Commands: ${botStopResponse.data.message}\n` +
            `‚è∞ Stopped at: ${new Date().toLocaleString('en-US', { timeZone: 'Africa/Addis_Ababa' })}\n\n` +
            `üí° Use /restart or the dashboard to restart the system.`
          );
        } else {
          await this.bot.sendMessage(chatId, '‚ö†Ô∏è Some systems may still be running. Check dashboard.');
        }

      } catch (error) {
        console.error('‚ùå Error in stop command:', error);
        await this.bot.sendMessage(msg.chat.id, '‚ùå Error stopping system: ' + error.message);
      }
    });
  }

  // üîÑ Handle /restart command
  setupRestartCommand() {
    this.bot.onText(/\/restart/, async (msg) => {
      if (!this.checkAdminAccess(msg)) return;

      try {
        const chatId = msg.chat.id;
        await this.bot.sendMessage(chatId, 'üîÑ Restarting bot commands...');

        const restartResponse = await this.makeApiCall('/api/bot/restart', {
          reason: `Restart requested by admin ${msg.from.first_name} (${msg.from.id})`
        });
        
        if (restartResponse.data.success) {
          await this.bot.sendMessage(chatId, 
            `‚úÖ Bot commands restarted successfully!\n` +
            `ü§ñ Status: ${restartResponse.data.data.isNowRunning ? 'Active' : 'Failed'}\n` +
            `üîÑ Previous state: ${restartResponse.data.data.wasActive ? 'Active' : 'Inactive'}\n` +
            `‚è∞ Restarted at: ${new Date().toLocaleString('en-US', { timeZone: 'Africa/Addis_Ababa' })}\n\n` +
            `üìù ${restartResponse.data.message}`
          );
        } else {
          await this.bot.sendMessage(chatId, 
            `‚ùå Failed to restart bot commands\n` +
            `üìù ${restartResponse.data.message || 'Unknown error'}`
          );
        }

      } catch (error) {
        console.error('‚ùå Error in restart command:', error);
        await this.bot.sendMessage(msg.chat.id, '‚ùå Error restarting: ' + error.message);
      }
    });
  }

  // üî• Handle /force_stop command
  setupForceStopCommand() {
    this.bot.onText(/\/force_stop/, async (msg) => {
      if (!this.checkAdminAccess(msg)) return;

      try {
        const chatId = msg.chat.id;
        await this.bot.sendMessage(chatId, 'üî• Force stopping ALL bot instances...');

        const forceStopResponse = await this.makeApiCall('/api/bot/stop', {
          reason: `Force stop requested by admin ${msg.from.first_name} (${msg.from.id})`,
          force: true
        });
        
        if (forceStopResponse.data.success) {
          await this.bot.sendMessage(chatId, 
            `üî• Force stop completed!\n` +
            `üõë All instances stopped: ${forceStopResponse.data.data.wasRunning ? 'Yes' : 'None were running'}\n` +
            `üßπ Cleanup: ${forceStopResponse.data.data.forceStop || 'Completed'}\n` +
            `‚è∞ Stopped at: ${new Date().toLocaleString('en-US', { timeZone: 'Africa/Addis_Ababa' })}\n\n` +
            `üí° All bot instances have been forcefully stopped.\n` +
            `‚úÖ Use /restart to start fresh.`
          );
        } else {
          await this.bot.sendMessage(chatId, 
            `‚ùå Force stop failed\n` +
            `üìù ${forceStopResponse.data.message || 'Unknown error'}`
          );
        }

      } catch (error) {
        console.error('‚ùå Error in force_stop command:', error);
        await this.bot.sendMessage(msg.chat.id, '‚ùå Error during force stop: ' + error.message);
      }
    });
  }

  // üè• Handle /health command
  setupHealthCommand() {
    this.bot.onText(/\/health/, async (msg) => {
      if (!this.checkAdminAccess(msg)) return;

      try {
        const chatId = msg.chat.id;
        await this.bot.sendMessage(chatId, 'üè• Running comprehensive health check...');

        const healthResponse = await this.makeApiCall('/api/bot/health', {}, { method: 'GET' });
        const health = healthResponse.data;
        
        let statusMessage = `üè• **Bot Health Report**\n\n`;
        
        // Overall health
        statusMessage += `üå°Ô∏è **Overall Health:** ${health.health === 'healthy' ? '‚úÖ Healthy' : health.health === 'unhealthy' ? '‚ö†Ô∏è Issues Detected' : '‚ùå Critical'}\n\n`;
        
        // Service status
        statusMessage += `üîß **Service Status:**\n`;
        statusMessage += `‚Ä¢ Running: ${health.service?.isRunning ? '‚úÖ' : '‚ùå'}\n`;
        statusMessage += `‚Ä¢ Uptime: ${health.service?.uptime || 'N/A'}\n`;
        statusMessage += `‚Ä¢ Restart Attempts: ${health.service?.reconnectAttempts || 0}\n\n`;
        
        // Bot status
        statusMessage += `ü§ñ **Bot Status:**\n`;
        statusMessage += `‚Ä¢ Online: ${health.bot?.isOnline ? '‚úÖ' : '‚ùå'}\n`;
        statusMessage += `‚Ä¢ Consecutive Errors: ${health.bot?.consecutiveErrors || 0}\n`;
        statusMessage += `‚Ä¢ Last Success: ${health.bot?.lastApiSuccess ? new Date(health.bot.lastApiSuccess).toLocaleString('en-US', { timeZone: 'Africa/Addis_Ababa' }) : 'Never'}\n\n`;
        
        // Telegram connection
        statusMessage += `üì° **Telegram:**\n`;
        statusMessage += `‚Ä¢ Connected: ${health.telegram?.connected ? '‚úÖ' : '‚ùå'}\n`;
        statusMessage += `‚Ä¢ Polling: ${health.telegram?.polling ? '‚úÖ' : '‚ùå'}\n`;
        statusMessage += `‚Ä¢ Commands Ready: ${health.telegram?.commandsReady ? '‚úÖ' : '‚ùå'}\n\n`;
        
        // Auto-started info
        if (health.autoStarted) {
          statusMessage += `üîÑ **Auto-Started:** Bot was down and has been restarted\n\n`;
        }
        
        // Recommendations
        if (health.health !== 'healthy') {
          statusMessage += `üí° **Recommendations:**\n`;
          if (!health.service?.isRunning) {
            statusMessage += `‚Ä¢ Use /restart to restart the bot\n`;
          }
          if (!health.telegram?.polling) {
            statusMessage += `‚Ä¢ Check for polling conflicts (409 errors)\n`;
            statusMessage += `‚Ä¢ Use /force_stop then /restart if needed\n`;
          }
          if ((health.bot?.consecutiveErrors || 0) > 10) {
            statusMessage += `‚Ä¢ Too many errors detected - consider restart\n`;
          }
        }
        
        statusMessage += `\n‚è∞ **Report Time:** ${new Date().toLocaleString('en-US', { timeZone: 'Africa/Addis_Ababa' })}`;

        await this.bot.sendMessage(chatId, statusMessage, { parse_mode: 'Markdown' });

      } catch (error) {
        console.error('‚ùå Error in health command:', error);
        await this.bot.sendMessage(msg.chat.id, 
          `‚ùå Health check failed: ${error.message}\n\n` +
          `üí° Try these commands:\n` +
          `‚Ä¢ /restart - Restart the bot\n` +
          `‚Ä¢ /force_stop - Force stop all instances\n` +
          `‚Ä¢ /status - Basic status check`
        );
      }
    });
  }

  // üîß Setup all system commands
  setupSystemCommands() {
    this.setupStatusCommand();
    this.setupStopCommand();
    this.setupRestartCommand();
    this.setupForceStopCommand();
    this.setupHealthCommand();
  }
}

module.exports = SystemCommands;